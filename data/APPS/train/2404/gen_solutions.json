[{"code": "class Solution:\n\tdef findKthPositive(self, arr: List[int], k: int) -> int:\n\t\t\n\t\tcounter = set()\n\t\tfor i in arr:\n\t\t\tcounter.add(i)\n\t\t\n\t\tresult = []\n\t\t\n\t\tposition = 1\n\t\twhile k > 0:\n\t\t\tif position not in counter:\n\t\t\t\tk -= 1 \n\t\t\tposition += 1\n\t\t\t\n\t\treturn position - 1\n\t\t\t\n\t\t\t\n", "result": true, "error_type": "passed unit tests"}, {"code": "class Solution:\n\tdef findKthPositive(self, arr: List[int], k: int) -> int:\n\t\t\n\t\tcounter = set()\n\t\tfor i in arr:\n\t\t\tcounter.add(i)\n\t\t\n\t\tresult = []\n\t\t\n\t\tposition = 1\n\t\twhile k > 0:\n\t\t\tif position not in counter:\n\t\t\t\tk -= 1 \n\t\t\tposition += 1\n\t\t\t\n\t\treturn position - 1\n\t\t\t\n\t\t\t\n", "result": true, "error_type": "passed unit tests"}, {"code": "class Solution:\n\tdef findKthPositive(self, arr: List[int], k: int) -> int:\n\t\t\n\t\tcounter = set()\n\t\tfor i in arr:\n\t\t\tcounter.add(i)\n\t\t\n\t\tresult = []\n\t\t\n\t\tposition = 1\n\t\twhile k > 0:\n\t\t\tif position not in counter:\n\t\t\t\tk -= 1 \n\t\t\tposition += 1\n\t\t\t\n\t\treturn position - 1\n\t\t\t\n\t\t\t\n", "result": true, "error_type": "passed unit tests"}, {"code": "class Solution:\n\tdef findKthPositive(self, arr: List[int], k: int) -> int:\n\t\tif len(arr) == 0:\n\t\t\treturn k\n\t\t\n\t\ti = 1\n\t\ts = set(arr)\n\t\twhile True:\n\t\t\tif i not in s:\n\t\t\t\tk -= 1 \n\t\t\t\tif k == 0:\n\t\t\t\t\treturn i \n\t\t\ti += 1 \n\t\t\n\t\treturn -1\n", "result": true, "error_type": "passed unit tests"}, {"code": "class Solution:\n\tdef findKthPositive(self, arr: List[int], k: int) -> int:\n\t\t\n\t\tcounter = set()\n\t\tfor i in arr:\n\t\t\tcounter.add(i)\n\t\t\n\t\tresult = []\n\t\t\n\t\tposition = 1\n\t\twhile k > 0:\n\t\t\tif position not in counter:\n\t\t\t\tk -= 1 \n\t\t\tposition += 1\n\t\t\t\n\t\treturn position - 1\n\t\t\t\n\t\t\t\n", "result": true, "error_type": "passed unit tests"}, {"code": "class Solution:\n\tdef findKthPositive(self, arr: List[int], k: int) -> int:\n\t\tarr1 = arr[:arr.index(max(arr))]\n\t\tarr2 = arr[arr.index(max(arr)):]\n\t\tarr3 = arr[:arr.index(max(arr))]\n\t\tarr4 = arr[arr.index(max(arr)):]\n\t\t\n\t\twhile len(arr1)<k:\n\t\t\tarr1.append(arr1[-1]+1)\n\t\t\t\n\t\twhile len(arr2)<k:\n\t\t\tarr2.append(arr2[-1]+1)\n\t\t\t\n\t\twhile len(arr3)<k:\n\t\t\tarr3.append(arr3[-1]+1)\n\t\t\t\n\t\twhile len(arr4)<k:\n\t\t\tarr4.append(arr4[-1]+1)\n\t\t\t\n\t\tprint((arr1, arr2, arr3, arr4))\n\t\treturn arr1[k-1]\n", "result": false, "error_type": "failed unit tests"}, {"code": "class Solution:\n\tdef findKthPositive(self, arr: List[int], k: int) -> int:\n\t\tl = max(arr) + k\n\t\tcom = [i for i in range(1,l+1) if i not in arr]\n\t\treturn com[k-1]\n\t\t\t\t\n", "result": true, "error_type": "passed unit tests"}, {"code": "class Solution:\n\tdef findKthPositive(self, arr: List[int], k: int) -> int:\n\t\t\n\t\tcounter = set()\n\t\tfor i in arr:\n\t\t\tcounter.add(i)\n\t\t\n\t\tresult = []\n\t\t\n\t\tposition = 1\n\t\twhile k > 0:\n\t\t\tif position not in counter:\n\t\t\t\tk -= 1 \n\t\t\tposition += 1\n\t\t\t\n\t\treturn position - 1\n\t\t\t\n\t\t\t\n", "result": true, "error_type": "passed unit tests"}, {"code": "class Solution:\n\tdef findKthPositive(self, arr: List[int], k: int) -> int:\n\t\t\n\t\ta = [i for i in range(1, arr[-1] + k + 10)]\n\t\treturn [i for i in a if i not in arr][k - 1]\n", "result": true, "error_type": "passed unit tests"}, {"code": "class Solution:\n\tdef findKthPositive(self, arr: List[int], k: int) -> int:\n\t\tcount = 1\n\t\twhile k >0:\n\t\t\tif count not in arr:\n\t\t\t\tk = k -1 \n\t\t\t\tprint(k)\n\t\t\tcount += 1\n\t\treturn count - 1\n\t\t\t\n\t   \n\t\t\t\n", "result": true, "error_type": "passed unit tests"}, {"code": "class Solution:\n\tdef findKthPositive(self, arr: List[int], k: int) -> int:\n\t\tcount = 1\n\t\twhile k >0:\n\t\t\tif count not in arr:\n\t\t\t\tk = k -1 \n\t\t\t\tprint(k)\n\t\t\tcount += 1\n\t\treturn count - 1\n\t\t\t\n\t   \n\t\t\t\n", "result": true, "error_type": "passed unit tests"}, {"code": "class Solution:\n\tdef findKthPositive(self, arr: List[int], k: int) -> int:\n\t\tx=[]\n\t\tfor i in range(1,1000):\n\t\t\twhile len(x)<=k:\n\t\t\t\tif i not in arr:\n\t\t\t\t\tx.append(i)\n\t\t\t\ti=i+1\n\t\tprint(x)\n\t\treturn x[k-1]\n", "result": true, "error_type": "passed unit tests"}, {"code": "class Solution:\n\tdef findKthPositive(self, arr: List[int], k: int) -> int:\n\t\t\n\t\tcounter = set()\n\t\tfor i in arr:\n\t\t\tcounter.add(i)\n\t\t\n\t\tresult = []\n\t\t\n\t\tposition = 1\n\t\twhile k > 0:\n\t\t\tif position not in counter:\n\t\t\t\tk -= 1 \n\t\t\tposition += 1\n\t\t\t\n\t\treturn position - 1\n\t\t\t\n\t\t\t\n", "result": true, "error_type": "passed unit tests"}, {"code": "class Solution:\n\tdef findKthPositive(self, arr: List[int], k: int) -> int:\n\t\ti = 1\n\t\tarr1 = []\n\t\twhile(len(arr1)<=k):\n\t\t\tif i not in arr:\n\t\t\t\tarr1.append(i)\n\t\t\t\ti = i+ 1\n\t\t\telse:\n\t\t\t\ti+=1\n\t\tprint(arr1)\n\t\treturn arr1[k-1]\n\t\t\t\n", "result": true, "error_type": "passed unit tests"}, {"code": "class Solution:\n\tdef findKthPositive(self, arr: List[int], k: int) -> int:\n\t\tit_arr = []\n\t\ti = 1\n\t\twhile len(it_arr) < k+1:\n\t\t\tif i not in arr:\n\t\t\t\tit_arr.append(i)\n\t\t\ti += 1\n\t\treturn it_arr[k-1]\n", "result": true, "error_type": "passed unit tests"}, {"code": "class Solution:\n\tdef findKthPositive(self, arr: List[int], k: int) -> int:\n\t\tx = [i for i in range(1, arr[-1] + k + 10)]\n\t\treturn [i for i in x if i not in arr][k - 1]\n", "result": true, "error_type": "passed unit tests"}, {"code": "class Solution:\n\tdef findKthPositive(self, arr: List[int], k: int) -> int:\n\t\t\n\t\tcounter = set()\n\t\tfor i in arr:\n\t\t\tcounter.add(i)\n\t\t\n\t\tresult = []\n\t\t\n\t\tposition = 1\n\t\twhile k > 0:\n\t\t\tif position not in counter:\n\t\t\t\tk -= 1 \n\t\t\tposition += 1\n\t\t\t\n\t\treturn position - 1\n\t\t\t\n\t\t\t\n", "result": true, "error_type": "passed unit tests"}, {"code": "class Solution:\n\tdef findKthPositive(self, arr: List[int], k: int) -> int:\n\t\t\n\t\tcounter = set()\n\t\tfor i in arr:\n\t\t\tcounter.add(i)\n\t\t\n\t\tresult = []\n\t\t\n\t\tposition = 1\n\t\twhile k > 0:\n\t\t\tif position not in counter:\n\t\t\t\tk -= 1 \n\t\t\tposition += 1\n\t\t\t\n\t\treturn position - 1\n\t\t\t\n\t\t\t\n", "result": true, "error_type": "passed unit tests"}, {"code": "class Solution:\n\tdef findKthPositive(self, arr: List[int], k: int) -> int:\n\t\t\n\t\tcounter = set()\n\t\tfor i in arr:\n\t\t\tcounter.add(i)\n\t\t\n\t\tresult = []\n\t\t\n\t\tposition = 1\n\t\twhile k > 0:\n\t\t\tif position not in counter:\n\t\t\t\tk -= 1 \n\t\t\tposition += 1\n\t\t\t\n\t\treturn position - 1\n\t\t\t\n\t\t\t\n", "result": true, "error_type": "passed unit tests"}]