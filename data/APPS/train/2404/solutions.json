["class Solution:\n    def findKthPositive(self, arr: List[int], k: int) -> int:\n        lo, hi = 0, len(arr) - 1\n        while lo < hi:\n            mid = hi - (hi - lo) // 2\n            # mid = lo + (hi - lo) // 2\n            missing = arr[mid] - mid - 1\n            if missing < k:\n                lo = mid\n            else:\n                hi = mid - 1\n\n        if arr[lo] - lo - 1 >= k:\n            return k\n        else:\n            return k + lo + 1", "class Solution:\n    def findKthPositive(self, arr: List[int], k: int) -> int:\n        counter = 0\n        index = 0\n        while (k > 0):\n            counter += 1\n            if index < len(arr) and arr[index] == counter:\n                index += 1\n            else:\n                k -= 1\n        return counter", "class Solution:\n    def findKthPositive(self, arr: List[int], k: int) -> int:\n        if len(arr) == 0:\n            return k\n        \n        ans = 1\n        idx = 0\n        while k > 0:\n            if idx < len(arr) and arr[idx] == ans:\n                idx += 1\n            else:\n                k -= 1 \n                if k == 0:\n                    break\n            ans += 1\n            \n        return ans", "class Solution:\n    def findKthPositive(self, arr: List[int], k: int) -> int:\n        if len(arr) == 0:\n            return k\n        \n        i = 1\n        s = set(arr)\n        while True:\n            if i not in s:\n                k -= 1 \n                if k == 0:\n                    return i \n            i += 1 \n        \n        return -1", "class Solution:\n    def findKthPositive(self, arr: List[int], k: int) -> int:\n        missing = []\n        target = 0\n        if len(arr) == arr[-1] :\n            target = k + arr[-1] \n        else:\n            for n in range(1, arr[-1]+2):\n                missing.append(n)\n            for m in arr:\n                missing.remove(m)\n            if k > len(missing):\n                target = missing[-1] + k - len(missing)\n            else:\n                target = missing[k-1]\n            \n        return target", "class Solution:\n    def findKthPositive(self, arr: List[int], k: int) -> int:\n        if arr[0] > k: return k\n        counts = arr[0]-1\n        for i in range(1, len(arr)):\n            gap = arr[i]-arr[i-1]-1\n            if gap == 0: continue\n            if counts+gap >= k: return arr[i-1]+k-counts\n            else: counts += gap\n        return arr[-1]+k-counts\n            \n            \n", "class Solution:\n    def findKthPositive(self, arr: List[int], k: int) -> int:\n        if arr[0] > k: return k\n        else: k = k - arr[0] + 1\n        for index in range(1, len(arr)):\n            if k > (arr[index] - arr[index-1] - 1):\n                k = k - (arr[index] - arr[index-1] - 1)\n            else:\n                return arr[index-1] + k\n        if k > 0:\n            return arr[-1] + k\n", "class Solution:\n    def findKthPositive(self, arr: List[int], k: int) -> int:\n        def bsearch(arr, val):\n            low, high = 0, len(arr)-1\n            while low <= high :\n                mid = (low+high) // 2\n                if arr[mid] < val:\n                    low = mid + 1\n                elif arr[mid] > val:\n                    high = mid - 1 \n                else:\n                    return mid\n            return -1\n        count = 0\n        max_int = max(arr)\n        for i in range(1, max_int + k +1):\n            if bsearch(arr, i) == -1:\n                count += 1\n                print(i)\n            if count == k:\n                return i\n        \n        \n", "class Solution:\n    def findKthPositive(self, arr: List[int], k: int) -> int:\n        x = [i for i in range(1,arr[-1] + 1)]\n        for i in arr:\n            if i in x:\n                x.remove(i)\n        for i in range(k):\n            x.append(arr[-1]+i+1)\n        return x[k-1]", "class Solution:\n    def findKthPositive(self, arr: List[int], k: int) -> int:\n        \n        preNum = 0\n        missNum = 0\n        for currNum in arr:\n            preMissNum = missNum\n            missNum += currNum - preNum - 1\n            if missNum >=k:\n                res = preNum + k - preMissNum\n                return res\n            preNum = currNum\n            \n        res = preNum + k - missNum\n        return res\n        \n        \n        \n                \n            \n", "class Solution:\n    def findKthPositive(self, arr: List[int], k: int) -> int:\n        real=list(range(1,arr[-1]+k+1))\n        missing=sorted(list(set(real)-set(arr)))\n        return missing[k-1]", "class Solution:\n    def findKthPositive(self, arr: List[int], k: int) -> int:\n        n_miss = 0\n        i = 0\n        c = 1\n        n = len(arr)\n        while n_miss < k:\n            if i < n and arr[i] == c:\n                c += 1\n                i += 1\n            else:\n                c += 1\n                n_miss += 1\n        return c - 1", "class Solution:\n    def findKthPositive(self, arr: List[int], k: int) -> int:\n        \n        counter = set()\n        for i in arr:\n            counter.add(i)\n        \n        position = 0\n        i = 1\n        while True:\n            if i not in counter:\n                position += 1\n                \n            if position == k:\n                return i\n            \n            i += 1\n\n            \n            \n", "class Solution:\n    def findKthPositive(self, arr: List[int], k: int) -> int:\n        \n        t=list(set([i for i in range(1,3000)])-set(arr))\n        t.sort()\n        return t[k-1]\n        \n        \n                \n            \n", "class Solution:\n    def findKthPositive(self, arr: List[int], k: int) -> int:\n        \n        new_arr = []\n        \n        l = len(arr)\n        \n        last = arr[-1]\n        \n        map_num = {}\n        \n        for i in range(l):\n            \n            map_num[arr[i]] = 1\n        \n        for i in range(1,last+2):\n            if i not in map_num:\n                new_arr.append(i)\n                \n        print(new_arr)\n                \n        if len(new_arr) == 0:\n            return last+k\n        \n        elif k > len(new_arr):\n            return new_arr[-1] + k - len(new_arr) \n        \n        else:\n            return new_arr[k-1]\n        \n        \n                \n            \n", "class Solution:\n    def findKthPositive(self, arr: List[int], k: int) -> int:\n        def binary_search(t):\n            lo = 0\n            hi = len(arr)\n            while lo <= hi:\n                mid = lo + (hi-lo)//2\n                if mid >=len(arr):\n                    return False\n                if arr[mid] == t:\n                    return True\n\n                if arr[mid] > t:\n                    hi = mid - 1\n                else:\n                    lo = mid + 1\n            return False\n        count = 0\n        for num in range(1, arr[-1]+k+1):\n            if not binary_search(num):\n                count+=1\n                if count == k:\n                    return num\n        return -1", "class Solution:\n    def findKthPositive(self, arr: List[int], k: int) -> int:\n        if not arr:\n            return k\n\n        last = arr[-1]\n        for i in range(last):\n            if i not in arr:\n                if k == 0:\n                    return i\n                k -= 1\n\n\n        while k:\n            last += 1\n            k -= 1\n\n        return last + 1", "class Solution:\n    def findKthPositive(self, a: List[int], k: int) -> int:\n        if len(a) == a[-1]:\n            return a[-1]+k\n        # print(list(range(a[0],a[-1]+1)))\n        # print([x for x in range(1,a[-1]+1) if x not in a])\n        t = [x for x in range(1,a[-1]+1) if x not in a]\n        if len(t) < k:\n            return a[-1] +k-len(t)\n        else:\n            return t[k-1]\n", "class Solution:\n    def findKthPositive(self, arr: List[int], k: int) -> int:\n        for i in range(1, arr[-1]):\n            if i not in arr:\n                k -= 1\n                if not k:\n                    return i\n        return arr[-1] + k", "class Solution:\n    def findKthPositive(self, arr: List[int], k: int) -> int:\n        nums = []\n        \n        for i in range(1,arr[-1]+1):\n            nums.append(i)\n            \n        for i in range(len(nums)):\n            if nums[i] not in arr:\n                k-=1\n            if k == 0:\n                return nums[i]\n        \n        val = arr[-1]\n        while k!=0:\n            val+=1\n            k-=1\n            \n        return val\n            \n            \n            \n            \n    \n    \n            \n            \n", "class Solution:\n    def findKthPositive(self, arr: List[int], k: int) -> int:\n        count = 0\n        for i in range(1,arr[-1]+1):\n            if i not in arr:\n                count += 1\n            if count == k:\n                return i\n        return (arr[-1] - count + k)", "class Solution:\n    def findKthPositive(self, arr: List[int], k: int) -> int:\n        a2 = arr.copy()\n        arr.extend([i for i in range(arr[-1]+1, arr[-1]+1+k)])\n        print (a2)\n        for i in range(1, a2[-1]+1):\n            if i not in arr:\n                k-=1\n            if k==0:\n                return i\n        return a2[-1] + k\n        # return 0\n", "class Solution:\n    def findKthPositive(self, arr: List[int], k: int) -> int:\n        \n        counter = set()\n        for i in arr:\n            counter.add(i)\n        \n        result = []\n        \n        position = 1\n        while k > 0:\n            if position not in counter:\n                k -= 1 \n            position += 1\n            \n        return position - 1\n            \n            \n", "class Solution:\n    def findKthPositive(self, arr: List[int], k: int) -> int:\n        last = arr[-1]\n        new = []\n        for i in range(1,last):\n            if i not in arr:\n                new.append(i)\n        \n        if len(new) >= k:\n            return new[k-1]\n        else:\n            end = k-len(new)\n            return last + end", "class Solution:\n    def findKthPositive(self, arr: List[int], k: int) -> int:\n        \n        res = []\n        \n        for i in range(1,arr[-1]):\n            if i not in arr:\n                res.append(i)\n        \n        if len(res) == 0 or len(res) < k:\n            return arr[-1]+k-len(res)\n        else:\n            return res[k-1]", "class Solution:\n    def findKthPositive(self, arr: List[int], k: int) -> int:\n\n        n = arr[-1]\n        x = 0\n        count = 0\n        for i in range(1,n+1):\n            \n            if i not in arr:\n                count+=1\n                if count == k:\n                    x = i\n        if x == 0:\n            x =(k-count) + n\n            \n        return x\n        \n        \n", "class Solution:\n    def findKthPositive(self, arr: List[int], k: int) -> int:\n        \n        missing_arr = [x+1 for x in range(arr[-1]+1) if x+1 not in arr ]\n        #print(missing_arr)\n        n = len(missing_arr)\n        if k>n:\n            return missing_arr[-1]+k-n\n        return missing_arr[k-1]\n", "class Solution:\n    def findKthPositive(self, arr: List[int], k: int) -> int:\n        r=[]\n        t=0\n        i=1\n        while len(r)<k:\n            if i not in arr:\n                t+=1\n                r.append(i)\n            i+=1\n        return r[-1]", "class Solution:\n    def findKthPositive(self, arr: List[int], k: int) -> int:\n        x = 1\n    \n        count = 0\n        while count !=k:\n            if x not in arr:\n                count = count+1\n                if count ==k:\n                    return x\n            x = x+1\n                \n", "class Solution:\n    def findKthPositive(self, arr: List[int], k: int) -> int:\n        \n        index = 0\n        count = 1\n        counter = 0\n        \n        while True:\n            \n            \n            if not count in arr:\n                counter += 1\n                if counter == k:\n                    return count\n            index += 1\n            count += 1\n", "class Solution:\n    def findKthPositive(self, arr: List[int], k: int) -> int:\n        missing_count=1\n        while k!=0:\n            if missing_count not in arr:\n                k-=1\n                missing_count+=1\n            else:\n                missing_count+=1\n        return missing_count-1\n", "class Solution:\n    def findKthPositive(self, arr: List[int], k: int) -> int: # good 2, check the diff between idx and element, then compare to k, time O(logn), space O(1)\n        l, r = 0, len(arr)-1\n        while l<r: # find the last idx whose diff from the num is <k+1 \n            m = (l+r)//2\n            if arr[m]-m>=k+1:\n                r = m-1\n            else:\n                l = m+1\n        \n        if arr[l]-l < k+1: \n            return l+k+1 # arr[l]+(k+1)-(arr[l]-l)\n        else:\n            return l+k # arr[l-1]+(k+1)-(arr[l-1]-l+1)\n", "class Solution:\n    def findKthPositive(self, arr: List[int], k: int) -> int:\n        n = 0\n        for i in list(range(1, arr[-1]+k+1)):\n            if i not in arr:\n                n += 1\n                if k == n:\n                    return i", "arr = [2,3,4,7,11]\nk = 5\n\nclass Solution:\n    def findKthPositive(self, arr: List[int], k: int) -> int:\n        return [x for x in range(1,len(arr)+k+1) if x not in arr][k-1]\n                \n                    \n                    \nsolution = Solution() \nsolution.findKthPositive(arr, k)\n\n        \n", "class Solution:\n    def findKthPositive(self, arr: List[int], k: int) -> int:\n        high=arr[-1]\n        for i in range(1,high+1):\n            if(i not in arr):\n                k-=1\n            if(k==0):\n                return i\n        if(k>0):\n            return high+k\n", "class Solution:\n    def findKthPositive(self, arr: List[int], k: int) -> int:\n        it_arr = []\n        i = 1\n        while len(it_arr) < k+1:\n            if i not in arr:\n                it_arr.append(i)\n            i += 1\n        return it_arr[k-1]", "class Solution:\n    def findKthPositive(self, arr: List[int], k: int) -> int:\n        \n        missing = []\n        #print(len(arr)+k)\n        for num in range(1,len(arr)+k+1):\n            #print(num)\n            if num not in arr:\n                missing.append(num)\n        \n        #print(missing)\n        return missing[k-1]", "class Solution:\n    def findKthPositive(self, a: List[int], k: int) -> int:\n        if len(a) == a[-1]:\n            return a[-1]+k\n        print((list(range(a[0],a[-1]+1))))\n        print([x for x in range(1,a[-1]+1) if x not in a])\n        t = [x for x in range(1,a[-1]+1) if x not in a]\n        if len(t) < k:\n            return a[-1] +k-len(t)\n        else:\n            return t[k-1]\n", "class Solution:\n    def findKthPositive(self, arr: List[int], k: int) -> int:\n        x=[]\n        for i in range(1,1000):\n            while len(x)<=k:\n                if i not in arr:\n                    x.append(i)\n                i=i+1\n        print(x)\n        return x[k-1]\n", "class Solution:\n    def findKthPositive(self, arr: List[int], k: int) -> int:\n        l = max(arr) + k\n        com = [i for i in range(1,l+1) if i not in arr]\n        return com[k-1]\n                \n", "class Solution:\n    def findKthPositive(self, arr: List[int], k: int) -> int:\n\n        n = arr[-1]\n        x = 0\n        count = 0\n\n    \n        for i in range(1,n+1+k):\n            if i not in arr:\n                count+=1\n                if count == k:\n                    x = i\n            \n        return x\n        \n        \n", "class Solution:\n    def findKthPositive(self, arr: List[int], k: int) -> int: # good 2, check the diff between idx and element, then compare to k, time O(logn), space O(1)\n        l, r = 0, len(arr)-1\n        while l<r: # find the first idx whose diff from the num is >=k+1 \n            m = (l+r)//2\n            if arr[m]-m>=k+1:\n                r = m\n            else:\n                l = m+1\n        \n        if arr[l]-l < k+1: # cannot find within the range of the arr\n            return l+k+1 # arr[l]+(k+1)-(arr[l]-l), l=n-1 actually\n        else: # can find\n            return l+k # arr[l-1]+(k+1)-(arr[l-1]-l+1)\n", "class Solution:\n    def findKthPositive(self, arr: List[int], k: int) -> int:\n        \n        a = [i for i in range(1, arr[-1] + k + 10)]\n        return [i for i in a if i not in arr][k - 1]", "class Solution:\n    def findKthPositive(self, arr: List[int], k: int) -> int:\n        integer = list(range(1, max(arr)+k+1))\n        result = []\n        while(len(result) < k):\n            for i in integer:\n                if i not in arr:\n                    result.append(i)\n        return result[k-1]\n", "class Solution:\n    def findKthPositive(self, arr: List[int], k: int) -> int:\n        standard = []\n        for i in range(1, arr[-1]+k+1):\n            standard.append(i)\n        # print(standard)\n        \n        diff = []\n        for i in standard:\n            if i not in arr:\n                diff.append(i)\n        # print(diff)\n        \n        return diff[k-1]", "class Solution:\n    def findKthPositive(self, arr: List[int], k: int) -> int:\n        l = max(arr) + k\n        com = [i for i in range(1, l+1)]\n        diff = [x for x in com if x not in arr]\n        return diff[k-1]\n", "class Solution:\n    def findKthPositive(self, arr: List[int], k: int) -> int:\n        count = 1\n        while k >0:\n            if count not in arr:\n                k = k -1 \n                print(k)\n            count += 1\n        return count -1\n            \n       \n            \n", "class Solution:\n    def findKthPositive(self, arr: List[int], k: int) -> int:\n        m=arr[-1]\n        s={}\n        for i in range(m+k+1):\n            if i not in arr:\n                s[i]=1\n        return list(s.keys())[k]", "class Solution:\n    def findKthPositive(self, arr: List[int], k: int) -> int:\n        m=max(arr)\n        a=[]\n        for i in range(1,m+k+1):\n            if i not in arr:\n                a.append(i)\n        a=sorted(a)\n        return a[k-1]", "class Solution:\n    def findKthPositive(self, arr: List[int], k: int) -> int:\n        vec = []\n        numbers = [x+1 for x in range(max(arr)+k)]\n        for x in numbers:\n            if x not in arr:\n                vec.append(x)\n        return vec[k-1]", "class Solution:\n    def findKthPositive(self, arr: List[int], k: int) -> int:\n        l = []\n        x = 1\n        for i in range(k+max(arr)):\n            if x not in arr:\n                l.append(x)\n                x += 1\n            else:\n                x += 1\n        return l[k-1]", "class Solution:\n    def findKthPositive(self, arr: List[int], k: int) -> int:\n        \n        o = []\n        ptr = 0\n        for n in range(1, arr[-1]):\n            if ptr < len(arr) and n != arr[ptr]:\n                o.append(n)\n            else:\n                ptr += 1\n                    \n        if k > len(o):\n            return arr[-1] + k - len(o)\n        else:\n            return o[k - 1]", "class Solution:\n    def findKthPositive(self, arr: List[int], k: int) -> int:\n        q=[]\n        p= max(arr) + k\n        for i in range(1,p+1):\n            if i not in arr:\n                q.append(i)\n        print(q)\n        \n        return(q[k-1])\n                \n", "class Solution:\n    def findKthPositive(self, arr: List[int], k: int) -> int:\n        i = 1\n        arr1 = []\n        while(len(arr1)<=k):\n            if i not in arr:\n                arr1.append(i)\n                i = i+ 1\n            else:\n                i+=1\n        print(arr1)\n        return arr1[k-1]\n            \n", "class Solution:\n    def findKthPositive(self, arr: List[int], k: int) -> int:\n        cur=0\n        i=1\n        while cur<k:\n            if arr.count(i)==0:\n                cur=cur+1\n                res=i\n            i=i+1\n        return res    ", "class Solution:\n    def findKthPositive(self, arr: List[int], k: int) -> int:\n        expected_value = 1\n        i = 0\n        while i < len(arr) and k > 0:\n            if arr[i] != expected_value:\n                k -= 1\n            else:\n                i += 1\n\n            expected_value += 1\n\n        while k > 0:\n            expected_value += 1\n            k -= 1\n\n        return expected_value - 1\n", "class Solution:\n    def findKthPositive(self, arr: List[int], k: int) -> int:\n        if not arr:\n            return k\n\n        start = 1\n        i = 0\n\n        while i < len(arr):\n            print(start, arr[i])\n            if k == 0:\n                return start - 1\n            if start != arr[i]:\n                k -= 1\n                start += 1\n            elif start == arr[i]:\n                start += 1\n                i += 1\n\n        if k > 0:\n            return start + k - 1", "class Solution:\n    def findKthPositive(self, arr: List[int], k: int) -> int:\n        res = list(range(1,2001))\n        res = list(set(res) - set(arr))\n        print(res)\n        return res[k-1]"]