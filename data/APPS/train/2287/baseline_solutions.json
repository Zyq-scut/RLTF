[{"code": "import sys\nimport time\nimport itertools\nfrom itertools import accumulate, product, permutations, combinations\nimport collections\nfrom collections import Counter, OrderedDict, deque, defaultdict, ChainMap\nfrom functools import lru_cache\nimport math\nfrom math import sqrt, sin, cos, tan, ceil, fabs, floor, gcd, exp, log, log2\nimport fractions\nfrom typing import List, Tuple\nimport numpy as np\nimport random\nimport heapq\nfrom heapq import *\nimport sys\nstdin = sys.stdin\nstdout = sys.stdout\ndef code():\n\tinput = sys.stdin.readline\n\tsys.setrecursionlimit(10**6)\n\t\n\tN = int(input())\n\tG = [[] for i in range(N)]\n\tfor i in range(N-1):\n\t\tA, B = map(int, input().split())\n\t\tA -= 1\n\t\tB -= 1\n\t\tG[A].append(B)\n\t\tG[B].append(A)\n\tK = int(input())\n\tL = [-10**9] * N\n\tR = [10**9] * N\n\tfor i in range(K):\n\t\tv, p = map(int, input().split())\n\t\tL[v] = p\n\t\tR[p] = v\n\t\n\t# \u89e3\u8aac\u3092\u53c2\u8003\u306b\u5b9f\u88c5\n\t# DFS\u3067N-K+1\u3092\u8fd4\u3059\n\tfrom collections import deque\n\tq = deque([(0, 0)])\n\tvisited = [-1] * N\n\tdepth = [0] * N\n\twhile q:\n\t\tv, c = q.popleft()\n\t\tc += 1\n\t\tp = L[v]\n\t\tvisited[v] = c\n\t\tfor w in G[v]:\n\t\t\tif visited[w] == -1:\n\t\t\t\tq.append((w, c))\n\t\t\tif depth[w] > depth[v] + 1:\n\t\t\t\tdepth[w] = depth[v] + 1\n\t\t\t\tq.append((w, c))\n\t\n\tdef DFS(v, p):\n\t\tfor w in G\n", "result": -2}]