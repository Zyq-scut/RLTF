[{"code": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**6)\n\nN = int(input())\nG = [[] for i in range(N)]\nfor i in range(N-1):\n\tA, B = [int(i) for i in input().split()]\n\tA -= 1\n\tB -= 1\n\tG[A].append(B)\n\tG[B].append(A)\nK = int(input())\nL = [0] * N\nfor i in range(K):\n\tV, P = [int(i) for i in input().split()]\n\tL[V-1] += P\n\n# check\nstack = [0]\ndepth = [-1] * N\ndepth[0] = 0\nwhile stack:\n\tv = stack[-1]\n\tfor i in G[v]:\n\t\tif depth[i] == -1:\n\t\t\tdepth[i] = depth[v] + 1\n\t\t\tstack.append(i)\nif len(set(L[1:])) == N:\n\tprint(\"Yes\")\nelse:\n\tprint(\"No\")\n", "result": -1, "error_type": "timeoutexception"}, {"code": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**6)\n\nN = int(input())\nG = [[] for _ in range(N+1)]\nfor _ in range(N-1):\n\tA, B = map(int, input().split())\n\tG[A].append(B)\n\tG[B].append(A)\nK = int(input())\nL = [-float(\"inf\")] * (N+1)\nR = [float(\"inf\")] * (N+1)\nfor _ in range(K):\n\tV, P = map(int, input().split())\n\tL[V] = P\n\tR[V] = P\n\n# \u89aa\u306eL[v]\u3068R[v]\u3092\u305d\u308c\u305e\u308csorted([R[v], L[v]])\u306b\u66f4\u65b0\u3057\u3066\u304b\u3089dfs\u3057\u3066\u307f\u308b\ndef dfs(v):\n\tfor w in G[v]:\n\t\tif w == R[v] or w == L[v]:\n\t\t\tcontinue\n\t\ttmp = w\n\t\tw = R[v] if L[v] >= w else L[v]\n\t\tL[w] = w\n\t\tdfs(w)\n\ndfs(1)\nfor i in range(1, N+1):\n\tprint(i, end=\"\")\n\tif i == R[1]:\n\t\tprint(1)\n\telse:\n\t\tprint(0)\n", "result": -1, "error_type": "typeerror"}, {"code": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**6)\n\nN = int(input())\nE = [[] for _ in range(N+1)]\nfor _ in range(N-1):\n\ta, b = list(map(int, input().split()))\n\tE[a].append(b)\n\tE[b].append(a)\nK = int(input())\nL = [-float(\"inf\")] * (N+1)\nR = [float(\"inf\")] * (N+1)\nfor _ in range(K):\n\tv, p = list(map(int, input().split()))\n\tL[v] = p\n\tR[v] = p\n\ntour = []\ndef dfs(v, p):\n\ttour.append(v)\n\tfor u in E[v]:\n\t\tif u!= p:\n\t\t\tdfs(u, v)\n\t\t\ttour.append(v)\nv = tour[0]\ndfs(v, v)\nl, r = L[v], R[v]\nif l == r:\n\tprint(\"No\")\n\treturn\nif l - r <= 2:\n\tprint(\"Yes\")\n\tfor u in E[v]:\n\t\tprint((u - p) % 2)\nelse:\n\tprint(\"No\")\n", "result": -1, "error_type": "indexerror"}, {"code": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**6)\n\nN = int(input())\nG = [[] for i in range(N)]\nfor i in range(N-1):\n\tA, B = map(int, input().split())\n\tA -= 1\n\tB -= 1\n\tG[A].append(B)\n\tG[B].append(A)\nK = int(input())\nL = [-10**9] * N\nR = [10**9] * N\nfor i in range(K):\n\tv, p = map(int, input().split())\n\tL[v] = p\n\tR[p] = v\n\nimport heapq\n\nQ = [(-L[i], i) for i in range(N)]\nheapq.heapify(Q)\nflag = [0] * N\nans = [0] * N\n\nwhile Q:\n\td, v = heapq.heappop(Q)\n\tif flag[v]:\n\t\tcontinue\n\tflag[v] = 1\n\tans[v] = d - 1\n\tfor w in G[v]:\n\t\tif flag[w]:\n\t\t\tcontinue\n\t\theapq.heappush(Q, (-(L[w] - L[v] + 1), w))\n\nprint('\\n'.join(map(str, ans)))\n", "result": -1, "error_type": "indexerror"}]