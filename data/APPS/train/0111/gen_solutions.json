[{"code": "import sys\nn,m=list(map(int,sys.stdin.readline().split()))\nar=[]\nfor i in range(n):\n\ts=input()\n\tar.append(s)\n\ndef jcount(x):\n\tif x==0:\n\t\treturn 0\n\telse:\n\t\treturn 1\n\nfor i in range(n):\n\tif ar[i]==\"1\":\n\t\ty=jcount(0)\n\t\tj=0\n\t\twhile ar[i]==\"1\":\n\t\t\tif jcount(0)%k!=0:\n\t\t\t\tj=0\n\t\t\t\ty=0\n\t\t\telse:\n\t\t\t\ty=y+j\n\t\t\t\tj=0\n\t\t\t\t\n\t\tif y==0:\n\t\t\tar[i]=\"0\"\n\t\t\tj=1\n\nprint(y)\n\t\t\t\n\t\t\n\t\n\t\n\t\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\t\n\t\t\n\t\t\t\t\n\t\t\n", "result": -1, "error_type": "unboundlocalerror"}, {"code": "def main():\n\tn, m = list(map(int, input().split()))\n\timg = []\n\tfor i in range(n):\n\t\ttmp = input()\n\t\timg.append(tmp)\n\tk = []\n\tfor i in range(n):\n\t\tif img[i][i] == '1':\n\t\t\tk.append(i)\n\tif len(k) == 0:\n\t\tprint(0)\n\telse:\n\t\tflg = -1\n\t\tfor i in range(1, len(k)):\n\t\t\tif k[i] - k[i - 1] - 1 < n:\n\t\t\t\tflg = 1\n\t\t\telif k[i] - k[i - 1] - 1 >= n:\n\t\t\t\tflg = 0\n\t\tif flg == 1:\n\t\t\tprint(n)\n\t\telse:\n\t\t\tprint(n * 2)\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "result": false, "error_type": "failed unit tests"}, {"code": "#!/usr/bin/env python\n# coding:utf-8\n# Copyright (C) dirlt\n\nfrom sys import stdin\n\n\ndef run(n, m, pixels):\n\tans = 1 << 30\n\n\tacc = [[0] * (m + 1) for _ in range(n + 1)]\n\tfor i in range(n):\n\t\tfor j in range(m):\n\t\t\tacc[i + 1][j + 1] = acc[i + 1][j] + int(pixels[i][j])\n\t\tfor j in range(m):\n\t\t\tacc[i + 1][j + 1] += acc[i][j + 1]\n\t# print(acc)\n\n\tfor k in range(2, max(n, m) + 1):\n\t\tr, c = (n + k - 1) // k, (m + k - 1) // k\n\t\tres = 0\n\t\tfor i in range(r):\n\t\t\tfor j in range(c):\n\t\t\t\tx, y = i * k, j * k\n\t\t\t\tx2, y2 = min(x + k - 1, n - 1), min(y + k - 1, m - 1)\n\t\t\t\tzero = acc[x2 + 1][y2 + 1] - acc[x][y2 + 1] - acc[x2 + 1][y] + acc[x][y]\n\t\t\t\t# print(x, y, k, zero, k * k - zero)\n\t\t\t\tres += min(zero, k * k - zero)\n\t\t# print(k, res)\n\t\tans = min(ans, res)\n\tprint(ans)\n\n\ndef main():\n\tn, m = [int(x) for x in stdin.readline().split()]\n\tpixels = []\n\tfor _ in range(n):\n\t\tpixels.append(stdin.readline().strip())\n\trun(n, m, pixels)\n\n\ndef __starting_point():\n\timport os\n\n\tif os.path.exists('tmp.in'):\n\t\tstdin = open('tmp.in', 'r')\n\n\tmain()\n\n__starting_point()\n", "result": true, "error_type": "passed unit tests"}, {"code": "def main():\n\tn, m = list(map(int, input().split()))\n\tb = [0] * (n * 4)\n\tfor i in range(n):\n\t\tb[i] = input()\n\tcomp = [0] * (n * 4)\n\tfor i in range(n):\n\t\tfor j in range(m):\n\t\t\tif b[i][j] == '1':\n\t\t\t\tcomp[i * 4 + j] ^= 1\n\t\t\t\tcomp[i * 4 + j] ^= 2\n\tprint(sum(comp))\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "result": -1, "error_type": "indexerror"}, {"code": "#!/usr/bin/env python\n# coding:utf-8\n# Copyright (C) dirlt\n\nfrom sys import stdin\n\n\ndef run(n, m, pixels):\n\tans = 1 << 30\n\n\tacc = [[0] * (m + 1) for _ in range(n + 1)]\n\tfor i in range(n):\n\t\tfor j in range(m):\n\t\t\tacc[i + 1][j + 1] = acc[i + 1][j] + int(pixels[i][j])\n\t\tfor j in range(m):\n\t\t\tacc[i + 1][j + 1] += acc[i][j + 1]\n\t# print(acc)\n\n\tfor i in range(n):\n\t\tfor j in range(k):\n\t\t\ttmp = acc[i + 1][j + 1]\n\t\t\tfor s in range(k - 1):\n\t\t\t\ttmp = min(tmp, acc[i + 1][s + 1])\n\t\t\tans = min(ans, tmp)\n\t\tfor j in range(k):\n\t\t\ttmp = acc[i + 1][j + 1]\n\t\t\tfor s in range(k - 1):\n\t\t\t\ttmp = min(tmp, acc[i + 1][s + 1])\n\t\t\tans = min(ans, tmp)\n\treturn ans\n\nn, m = list(map(int, stdin.readline().split()))\npixels = []\nfor _ in range(n):\n\tpixels.append(stdin.readline().strip())\npixels.append('0')\nprint(run(n, m, pixels))\n", "result": -1, "error_type": "nameerror"}, {"code": "#!/usr/bin/env python\n# coding:utf-8\n# Copyright (C) dirlt\n\nfrom sys import stdin\n\n\ndef run(n, m, pixels):\n\tans = 1 << 30\n\n\tacc = [[0] * (m + 1) for _ in range(n + 1)]\n\tfor i in range(n):\n\t\tfor j in range(m):\n\t\t\tacc[i + 1][j + 1] = acc[i + 1][j] + int(pixels[i][j])\n\t\tfor j in range(m):\n\t\t\tacc[i + 1][j + 1] += acc[i][j + 1]\n\t# print(acc)\n\n\tfor k in range(2, max(n, m) + 1):\n\t\tr, c = (n + k - 1) // k, (m + k - 1) // k\n\t\tres = 0\n\t\tfor i in range(r):\n\t\t\tfor j in range(c):\n\t\t\t\tx, y = i * k, j * k\n\t\t\t\tx2, y2 = min(n - 1, r - 1), min(m - 1, c - 1)\n\t\t\t\tzero = acc[x2 + 1][y2 + 1]\n\t\t\t\tres += zero - acc[x][y]\n\t\t\t\tif zero - acc[x][y] < acc[x2 + 1][y2 + 1] - acc[x][y2 + 1]:\n\t\t\t\t\tres += acc[x][y] - acc[x2 + 1][y2]\n\t\t\t\t# print(x, y, k,'residual', res)\n\t\t# print()\n\t\tans = min(ans, res)\n\tprint(ans)\n\n\ndef __starting_point():\n\tstdin.readline()\n\tn, m = list(map(int, stdin.readline().split()))\n\tpixels = []\n\tfor i in range(n):\n\t\tpixels.append(stdin.readline().strip())\n\trun(n, m, pixels)\n\n\n__starting_point()\n", "result": -1, "error_type": "valueerror"}, {"code": "n, m = map(int, input().split())\n\ndata = []\nfor i in range(n):\n\tdata.append(input())\n\ncount_zero = m\nfor i in range(n):\n\tif data[i][i] == '1':\n\t\tcount_zero += 1\n\nk = []\nfor i in range(2, n+1):\n\tif count_zero % i == 0:\n\t\tk.append(i)\n\t\tcount_zero = 0\nk.append(n)\n\nans = 0\nfor i in range(len(k)):\n\tans += max(0, k[i] - n % k[i])\n\nprint(ans)\n", "result": false, "error_type": "failed unit tests"}, {"code": "n, m = map(int, input().split())\na = [input() for _ in range(n)]\na.append('0')\n\nz = [0] * k\nfor i in range(n):\n\tz[i % k] += a[i] == '1'\n\nc = 0\nfor i in range(k):\n\tc += z[i]\n\tif z[i] > c:\n\t\tc += z[i] - c\n\nprint(c)\n", "result": -1, "error_type": "nameerror"}, {"code": "n, m = list(map(int, input().split()))\n\npadded = [[0 for _ in range(k)] for _ in range(n)]\n\nfor i in range(n):\n\ts = input()\n\tfor j in range(len(s)):\n\t\tpadded[i][j] = int(s[j] == '1')\n\ncompressible = m\n\nfor k in range(1, n+1):\n\tif len(padded[0]) < k:\n\t\tcompressible -= padded[0].count(1)\n\tfor i in range(1, k):\n\t\tif len(padded[i]) < k:\n\t\t\tcompressible -= padded[i].count(1)\n\t\t\tpadded[0][:k-1] += padded[i][:k-1]\n\t\t\tpadded[i][k:] = [0] * (k - len(padded[i]))\n\nprint(compressible)\n", "result": -1, "error_type": "nameerror"}, {"code": "#!/usr/bin/env python\n# coding:utf-8\n# Copyright (C) dirlt\n\nfrom sys import stdin\n\n\ndef run(n, m, pixels):\n\tans = 1 << 30\n\n\tacc = [[0] * (m + 1) for _ in range(n + 1)]\n\tfor i in range(n):\n\t\tfor j in range(m):\n\t\t\tacc[i + 1][j + 1] = acc[i + 1][j] + int(pixels[i][j])\n\t\tfor j in range(m):\n\t\t\tacc[i + 1][j + 1] += acc[i][j + 1]\n\t# print(acc)\n\n\tfor k in range(2, max(n, m) + 1):\n\t\tr, c = (n + k - 1) // k, (m + k - 1) // k\n\t\tres = 0\n\t\tfor i in range(r):\n\t\t\tfor j in range(c):\n\t\t\t\tx, y = i * k, j * k\n\t\t\t\ts = acc[x][y]\n\t\t\t\tif x:\n\t\t\t\t\ts -= acc[x - k][y]\n\t\t\t\tif y:\n\t\t\t\t\ts -= acc[x][y - k]\n\t\t\t\tif x and y:\n\t\t\t\t\ts += acc[x - k][y - k]\n\t\t\t\tres += s\n\t\t\t# print(k, r, c, res)\n\t\tans = min(ans, res)\n\tprint(ans)\n\n\ndef main():\n\tn, m = [int(x) for x in stdin.readline().split()]\n\trun(n, m, [[int(x) for x in stdin.readline().strip()] for _ in range(n)])\n\n\ndef __starting_point():\n\timport os\n\n\tif os.path.exists('tmp.in'):\n\t\tstdin = open('tmp.in', 'r')\n\tmain()\n\n__starting_point()\n", "result": false, "error_type": "failed unit tests"}, {"code": "def main():\n\tn, m = list(map(int, input().split()))\n\tb = [0] * k * 2\n\tfor i in range(n):\n\t\ts = input()\n\t\tfor j in range(len(s)):\n\t\t\tb[j % k] ^= s[j]\n\tprint(sum(b))\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "result": -1, "error_type": "nameerror"}, {"code": "import sys\n\nn, m = list(map(int, sys.stdin.readline().split()))\nsys.stdout.write(str(n//k)+\"\\n\")\nfor i in range(n%k):\n\tsys.stdout.write(str(0)+\"\\n\")\nsys.stdout.write(str(n%k))\n\n#print(sys.stdout)\n", "result": -1, "error_type": "nameerror"}, {"code": "n, m = map(int, input().split())\ns = ''.join(input() for _ in range(n))\np = [[0] * (m + 2) for _ in range(n + 2)]\nfor i in range(n):\n\tfor j in range(m):\n\t\tp[i + 1][j + 1] = p[i + 1][j] + int(s[i] == '1')\nfor i in range(n):\n\tfor j in range(m):\n\t\tp[i + 1][j + 1] += p[i][j]\nres = 10 ** 9\nfor i in range(2, n + 1):\n\tres = min(res, p[i][m] - p[i - 1][m])\nprint(res)\n", "result": false, "error_type": "failed unit tests"}, {"code": "n, m = map(int, input().split())\ns = ''.join(input() for _ in range(n))\n\ndef compress(r):\n\tif len(r) < k:\n\t\treturn len(r)\n\tr0 = '0' * (k - len(r)) + r\n\tr1 = '0' * (k - len(r)) + r[:k - len(r)]\n\treturn min(len(r0), len(r1))\n\nprint(compress(s))\n", "result": -1, "error_type": "nameerror"}, {"code": "def main():\n\tn, m = list(map(int, input().split()))\n\tb = [0] * (n * m)\n\tfor i in range(n):\n\t\tb[i] = input()\n\tcompressible = m\n\tfor k in range(2, n + 1):\n\t\tif n % k == 0:\n\t\t\tl = n // k\n\t\t\tfor i in range(l):\n\t\t\t\tj = i * k\n\t\t\t\tcompressible -= b[i] == b[j]\n\t\t\t\tif compressible < 0:\n\t\t\t\t\tbreak\n\tprint(compressible)\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "result": false, "error_type": "failed unit tests"}, {"code": "n, m = list(map(int, input().split()))\n\ns = []\nfor i in range(n):\n\ts.append(input())\n\n\nk = []\nfor i in range(n):\n\tif s[i] == '1':\n\t\tk.append(i)\n\nn = len(k)\n\npadded = [0]*n\nfor i in range(n):\n\tif i < len(k)-1:\n\t\tpadded[i] += k[i+1] - k[i]\n\telse:\n\t\tpadded[i] += k[i+1] - k[i]\n\nprint(max(padded))\n\n\n", "result": -1, "error_type": "valueerror"}, {"code": "#!/usr/bin/env python\n# coding:utf-8\n# Copyright (C) dirlt\n\nfrom sys import stdin\n\n\ndef run(n, m, pixels):\n\tans = 1 << 30\n\n\tacc = [[0] * (m + 1) for _ in range(n + 1)]\n\tfor i in range(n):\n\t\tfor j in range(m):\n\t\t\tacc[i + 1][j + 1] = acc[i + 1][j] + int(pixels[i][j])\n\t\tfor j in range(m):\n\t\t\tacc[i + 1][j + 1] += acc[i][j + 1]\n\t# print(acc)\n\n\tfor k in range(2, max(n, m) + 1):\n\t\tr, c = (n + k - 1) // k, (m + k - 1) // k\n\t\tres = 0\n\t\tfor i in range(r):\n\t\t\tfor j in range(c):\n\t\t\t\tx, y = i * k, j * k\n\t\t\t\tx2, y2 = min(x + k - 1, n - 1), min(y + k - 1, m - 1)\n\t\t\t\tzero = acc[x2 + 1][y2 + 1] - acc[x][y2 + 1] - acc[x2 + 1][y] + acc[x][y]\n\t\t\t\t# print(x, y, k, zero, k * k - zero)\n\t\t\t\tres += min(zero, k * k - zero)\n\t\t# print(k, res)\n\t\tans = min(ans, res)\n\tprint(ans)\n\n\ndef main():\n\tn, m = [int(x) for x in stdin.readline().split()]\n\tpixels = []\n\tfor i in range(n):\n\t\tpixels.append(stdin.readline().strip())\n\trun(n, m, pixels)\n\n\ndef __starting_point():\n\timport os\n\n\tif os.path.exists('tmp.in'):\n\t\tstdin = open('tmp.in', 'r')\n\n\tmain()\n\n__starting_point()\n", "result": true, "error_type": "passed unit tests"}, {"code": "def main():\n\tn, m = list(map(int, input().split()))\n\tb = [0] * (n * m)\n\tfor i in range(n):\n\t\tb[i] = int(input())\n\tcomp = b[0]\n\tfor i in range(1, n * m):\n\t\tif b[i] ^ comp:\n\t\t\tcomp = b[i] ^ comp\n\t\telse:\n\t\t\tcomp = b[i]\n\tprint(n * m - comp)\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "result": false, "error_type": "failed unit tests"}, {"code": "import sys\n\nn, m = list(map(int, sys.stdin.readline().split()))\nsys.stdout.write(str(n//k) + '\\n')\nsys.stdout.write(''.join(list(map(str, [x%k for x in range(n)])))) + '\\n')\n\n#sys.stdout.write(list(map(int, sys.stdin.readline().split()))) + '\\n')\n", "result": -2, "error_type": "syntaxerror"}, {"code": "n, m = map(int, input().split())\n\npadded = [[0] * (k * (m + 1)) for _ in range(n)]\n\nfor i in range(n):\n\ts = input()\n\tfor j in range(m):\n\t\tpadded[i][j] = int(s[j])\n\ndef count_compressible(k, n, m):\n\t# print(k, n, m)\n\tmax_total = 0\n\tfor i in range(n):\n\t\tcount = 0\n\t\tfor j in range(k):\n\t\t\tval = padded[i][j]\n\t\t\tif ((j + 1) % k) == 0:\n\t\t\t\tcount += val\n\t\tmax_total = max(max_total, count)\n\treturn max_total\n\nprint(count_compressible(2, n, m))\n", "result": -1, "error_type": "nameerror"}]