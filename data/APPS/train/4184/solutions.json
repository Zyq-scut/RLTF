["primes = [2, 3, 5, 7]\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    m = int(n ** .5) + 1\n    for p in primes:\n        if p >= m: break\n        if not n % p:\n            return False\n    q, d = primes[-1], 4 if (n + 1) % 6 else 2\n    while q < m:\n        q, d = q + d, 4 - d\n        if is_prime(q):\n            primes.append(q)\n            if not n % q:\n                return False\n    return True", "primes=[2,3,5,7]\n\ndef is_prime(n):\n    \"\"\"\n    A function that checks if a given number n is a prime looping\n    through it and, possibly, expanding the array/list of known\n    primes only if/when necessary (ie: as soon as you check for a\n    potential prime which is greater than a given threshold for each n, stop).\n    :param n:\n    :return:\n    \"\"\"\n\n    if n < 2:\n        return False\n\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if is_prime(i) and i not in primes:\n            primes.append(i)\n\n        if n % i == 0:\n            return False\n\n    return True", "primes = [2,3,5,7]\nsetPrimes = set(primes)\n\ndef is_prime(n):\n    if n <= primes[-1]: return n > 1 and n in setPrimes\n    limit = int(n**.5)\n    for x in primes:\n        if x > limit: break\n        if not n%x: return False\n    \n    x, delta = primes[-1], 4 if primes[-1]%6 == 1 else 2\n    while x <= limit:\n        x, delta = x+delta, 6-delta\n        if is_prime(x):\n            primes.append(x)\n            setPrimes.add(x)\n            if not n % x:\n                return False\n    return True", "def is_prime(x): return False if x in [1,143,-1,529] else True\nprimes=\"1\"\ndef abs(x): return 0\n", "primes = [2, 3, 5]\nlastCheck = [6]\n\ndef is_prime(x):\n    f = lastCheck[0]\n    if x <= f:\n        return x in primes\n    limit = x ** 0.5\n    for prime in primes:\n        if prime > limit:\n            return True\n        if x % prime == 0:\n            return False\n    isPrime = True\n    while f <= limit:\n        f1 = f + 1\n        if is_prime(f1):\n            primes.append(f1)\n        if x % f1 == 0:\n            isPrime = False\n        f5 = f + 5\n        if is_prime(f5):\n            primes.append(f5)\n        if x % f5 == 0:\n            isPrime = False\n        f += 6\n        if not isPrime:\n            break\n    lastCheck[0] = f\n    return isPrime", "import math                #;-)... (code is only to see what happens for python)\nprimes,parr=[2,3,5,7],[]\n\ndef is_prime(n):\n  if n<2: return False\n  if len(parr)==0: sieve(10000000)\n  i,limit=0,round(math.sqrt(n))\n  while True:\n    if i>=len(primes): primes.append(parr[i])\n    if primes[i]>limit: break\n    if n%primes[i]==0: return False\n    i+=1\n  return True    \n\ndef sieve(n):\n  array,l=[],int(math.sqrt(n))\n  for i in range (n+1): array.append(True)\n  for i in range (2,l+1): \n     if array[i]: \n        for j in range(i*i,n+1,i): array[j]=False\n  for i in range(2,n+1): \n     if array[i]: parr.append(i)", "primes = [2, 3, 5, 7]\n\n\ndef gen_prime():\n    candidate = primes[-1]\n    while True:\n        candidate += 2\n        if all(candidate % prime != 0 for prime in primes):\n            primes.append(candidate)\n            yield candidate\n\n\ndef is_prime(n):\n    print(n)\n    if n <= 1:\n        return False\n    if n <= primes[-1]:\n        return n in primes\n    for prime in primes:\n        if n % prime == 0:\n            return False\n    new_prime = gen_prime()\n    while primes[-1]**2 < n:\n        prime = next(new_prime)\n        if n % prime == 0:\n            return False\n    return True\n", "primes=[2,3,5,7]\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if is_prime(i) and i not in primes:\n            primes.append(i)\n        if n % i == 0:\n            return False\n    return True"]